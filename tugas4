import 'dart:async';
import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: SplashScreen(),
    );
  }
}

// Splash Screen
class SplashScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    Timer(Duration(seconds: 4), () {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => HomePage()),
      );
    });

    return Scaffold(
      body: Center(
        child: Text(
          'Splash Screen',
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
      ),
    );
  }
}

// Home Page
class HomePage extends StatefulWidget {
  const HomePage({Key? key}) : super(key: key);

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final List<Map<String, dynamic>> products = [
    {
      "name": "Earphone",
      "price": 350000,
      "image":
          "https://www.joyroom.com/cdn/shop/files/1_aa26048c-e77c-4786-bb9f-f8ab76bb3c00.jpg?v=1720088470&width=1600",
    },
    {
      "name": "iPhone 11",
      "price": 7500000,
      "image":
          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9BuMokvB2LpeMeZeUwfMIUqd8H9YzTRWxoA&s",
    },
    {
      "name": "Apple Watch",
      "price": 6000000,
      "image":
          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT9x9Qt7KFwvpsBDmOVrC7rLhCFE7XkXbNlaw&s",
    },
    {
      "name": "Laptop Asus Vivobook 14",
      "price": 10000000,
      "image":
          "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQxLEfGHuisqnbocd7JFzCHdB83EjOVL_6NXA&s",
    },
  ];

  List<Map<String, dynamic>> filteredProducts = [];
  final TextEditingController searchController = TextEditingController();

  List<Map<String, dynamic>> cartProducts = [];

  @override
  void initState() {
    super.initState();
    filteredProducts = products;
  }

  void filterProducts(String query) {
    setState(() {
      if (query.isEmpty) {
        filteredProducts = products;
      } else {
        filteredProducts = products
            .where((product) =>
                product['name'].toLowerCase().contains(query.toLowerCase()))
            .toList();
      }
    });
  }

  void addToCart(Map<String, dynamic> product) {
    setState(() {
      final index =
          cartProducts.indexWhere((p) => p['name'] == product['name']);
      if (index >= 0) {
        cartProducts[index]['quantity']++;
      } else {
        cartProducts.add({...product, 'quantity': 1});
      }
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("${product['name']} added to cart!")),
    );
  }

  void clearCart() {
    setState(() {
      cartProducts.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.menu, color: Colors.black),
          onPressed: () {},
        ),
        title: Text(
          'E-Commerce',
          style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold),
        ),
        actions: [
          IconButton(
            icon: Icon(Icons.notifications_none, color: Colors.black),
            onPressed: () {},
          ),
          IconButton(
            icon: Icon(Icons.shopping_cart_outlined, color: Colors.black),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => CartPage(
                    cartProducts: cartProducts,
                    onCheckout: clearCart,
                  ),
                ),
              );
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: searchController,
              decoration: InputDecoration(
                hintText: "Search products...",
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide.none,
                ),
                fillColor: Colors.grey[200],
                filled: true,
                prefixIcon: Icon(Icons.search),
              ),
              onChanged: filterProducts,
            ),
            SizedBox(height: 20),
            Expanded(
              child: GridView.builder(
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 2,
                  crossAxisSpacing: 8,
                  mainAxisSpacing: 8,
                  childAspectRatio: 0.75,
                ),
                itemCount: filteredProducts.length,
                itemBuilder: (context, index) {
                  final product = filteredProducts[index];
                  return GestureDetector(
                    onTap: () => addToCart(product),
                    child: Card(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Expanded(
                            child: ClipRRect(
                              borderRadius: BorderRadius.vertical(
                                top: Radius.circular(8),
                              ),
                              child: Image.network(
                                product['image'],
                                fit: BoxFit.cover,
                                width: double.infinity,
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  product['name'],
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16,
                                  ),
                                ),
                                SizedBox(height: 4),
                                Text(
                                  "Rp ${product['price']}",
                                  style: TextStyle(color: Colors.grey),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Cart Page
class CartPage extends StatefulWidget {
  final List<Map<String, dynamic>> cartProducts;
  final VoidCallback onCheckout;

  const CartPage(
      {Key? key, required this.cartProducts, required this.onCheckout})
      : super(key: key);

  @override
  _CartPageState createState() => _CartPageState();
}

class _CartPageState extends State<CartPage> {
  final double discount = 0.10;

  double calculateSubtotal() {
    double subtotal = 0;
    for (var product in widget.cartProducts) {
      subtotal += product['price'] * product['quantity'];
    }
    return subtotal;
  }

  double calculateTotalPrice() {
    return calculateSubtotal() * (1 - discount);
  }

  void removeFromCart(int index) {
    setState(() {
      widget.cartProducts.removeAt(index);
    });
  }

  void updateQuantity(int index, bool isAdding) {
    setState(() {
      if (isAdding) {
        widget.cartProducts[index]['quantity']++;
      } else {
        if (widget.cartProducts[index]['quantity'] > 1) {
          widget.cartProducts[index]['quantity']--;
        } else {
          removeFromCart(index);
        }
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Cart"),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: widget.cartProducts.length,
              itemBuilder: (context, index) {
                final product = widget.cartProducts[index];
                return Card(
                  child: ListTile(
                    title: Text(product['name']),
                    subtitle:
                        Text("Rp ${product['price']} x ${product['quantity']}"),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: Icon(Icons.remove),
                          onPressed: () => updateQuantity(index, false),
                        ),
                        Text("${product['quantity']}"),
                        IconButton(
                          icon: Icon(Icons.add),
                          onPressed: () => updateQuantity(index, true),
                        ),
                        IconButton(
                          icon: Icon(Icons.delete, color: Colors.red),
                          onPressed: () => removeFromCart(index),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
          Divider(),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Text("Subtotal: Rp ${calculateSubtotal().toStringAsFixed(0)}"),
                Text("Discount: ${discount * 100}%"),
                Text("Total: Rp ${calculateTotalPrice().toStringAsFixed(0)}",
                    style:
                        TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
                SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text("Checkout Successful"),
                        content: Text(
                            "Thank you for your purchase! Total: Rp ${calculateTotalPrice().toStringAsFixed(0)}"),
                        actions: [
                          TextButton(
                            onPressed: () {
                              widget.onCheckout();
                              Navigator.of(context).pop();
                              Navigator.of(context).pop();
                            },
                            child: Text("OK"),
                          ),
                        ],
                      ),
                    );
                  },
                  child: Text("Checkout"),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
